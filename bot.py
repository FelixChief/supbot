import logging
import sqlite3
import os
import re
import asyncio
import psycopg2#
from psycopg2.extras import RealDictCursor#
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.ext import JobQueue

# –î–û–ë–ê–í–¨ –ü–û–°–õ–ï –ò–ú–ü–û–†–¢–û–í:
DATABASE_URL = os.environ.get('DATABASE_URL')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# –§–æ—Ä–º–∞—Ç: {hash_id: message_id}
sent_notifications = {}

# === –ö–û–î –ü–†–û–í–ï–†–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
ALLOWED_USER_IDS = {8428922739}  # –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–∏ user_id

def is_user_allowed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    return user_id in ALLOWED_USER_IDS

async def check_access(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        if update.message:
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n"
                "–í–∞—à ID –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
        elif update.callback_query:
            await update.callback_query.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n"
                "–í–∞—à ID –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
        return False
    return True

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not await check_access(update, context):
        return
    
    await update.message.reply_text(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )
# === –ö–û–ù–ï–¶ –ö–û–î–ê –ü–†–û–í–ï–†–ö–ò ===

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

#def init_database():
#    """–°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
#    conn = get_connection()
#    cursor = conn.cursor()
#    
#    # –¢–∞–±–ª–∏—Ü–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
#    cursor.execute('''
#        CREATE TABLE IF NOT EXISTS libraries (
#            id INTEGER PRIMARY KEY AUTOINCREMENT,
#            name TEXT UNIQUE NOT NULL,
#            description TEXT,
#            notifications_enabled BOOLEAN DEFAULT FALSE
#        )
#    ''')
#   
#    # –¢–∞–±–ª–∏—Ü–∞ —Ö–µ—à–µ–π
#    cursor.execute('''
#        CREATE TABLE IF NOT EXISTS hashes (
#            id INTEGER PRIMARY KEY AUTOINCREMENT,
#            library_id INTEGER,
#            hash_text TEXT NOT NULL,
#            phone_number TEXT NOT NULL,
#            status TEXT DEFAULT '',
#            time_text TEXT DEFAULT '00:00',
#            FOREIGN KEY (library_id) REFERENCES libraries (id)
#        )
#    ''')
#    
#    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
#    try:
#        cursor.execute("SELECT phone_type FROM hashes LIMIT 1")
#    except sqlite3.OperationalError:
#        cursor.execute("ALTER TABLE hashes ADD COLUMN phone_type TEXT DEFAULT ''")
#        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ phone_type –≤ —Ç–∞–±–ª–∏—Ü—É hashes")
#    
#    try:
#        cursor.execute("SELECT missed_cycles FROM hashes LIMIT 1")
#    except sqlite3.OperationalError:
#        cursor.execute("ALTER TABLE hashes ADD COLUMN missed_cycles INTEGER DEFAULT 0")
#        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ missed_cycles –≤ —Ç–∞–±–ª–∏—Ü—É hashes")
#    
#    try:
#        cursor.execute("SELECT next_notification FROM hashes LIMIT 1")
#    except sqlite3.OperationalError:
#        cursor.execute("ALTER TABLE hashes ADD COLUMN next_notification TEXT DEFAULT ''")
#        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ next_notification –≤ —Ç–∞–±–ª–∏—Ü—É hashes")
#    
#    conn.commit()
#    conn.close()
#    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!")
print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL...")
if DATABASE_URL:
    # –ü–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    db_info = DATABASE_URL.split('@')
    if len(db_info) > 1:
        print(f"üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: {db_info[1]}")
    else:
        print(f"üîç DATABASE_URL: {DATABASE_URL[:50]}...")
else:
    print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def get_connection():
    DATABASE_URL = os.environ.get('DATABASE_URL')
    print(f"üîó DATABASE_URL: {DATABASE_URL}")
    
    if DATABASE_URL:
        try:
            # –ó–∞–º–µ–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ö–æ—Å—Ç –Ω–∞ –≤–Ω–µ—à–Ω–∏–π
            external_url = DATABASE_URL.replace('postgres.railway.internal', 'monorail.proxy.rlwy.net')
            print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ URL: {external_url.split('@')[1]}")
            return psycopg2.connect(external_url)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - SQLite
    print("üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite...")
    return sqlite3.connect('library.db')
    
def init_database():
    """–°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    conn = get_connection()
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS libraries (
            id SERIAL PRIMARY KEY,
            name TEXT UNIQUE NOT NULL,
            description TEXT,
            notifications_enabled BOOLEAN DEFAULT FALSE
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ö–µ—à–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS hashes (
            id SERIAL PRIMARY KEY,
            library_id INTEGER REFERENCES libraries(id),
            hash_text TEXT NOT NULL,
            phone_number TEXT NOT NULL,
            status TEXT DEFAULT '',
            time_text TEXT DEFAULT '00:00',
            phone_type TEXT DEFAULT '',
            missed_cycles INTEGER DEFAULT 0,
            next_notification TEXT DEFAULT ''
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!")

# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ====================

def validate_library_name(name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (1-30 —Å–∏–º–≤–æ–ª–æ–≤)"""
    return 1 <= len(name) <= 30

def validate_library_description(desc):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (1-50 —Å–∏–º–≤–æ–ª–æ–≤)"""
    return 1 <= len(desc) <= 50

def validate_hash(hash_text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞: FXexpress******H (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –ª—é–±–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    hash_upper = hash_text.upper()
    if (hash_upper.startswith('FXEXPRESS') and 
        hash_upper.endswith('H') and 
        len(hash_upper) == 16):  # FXEXPRESS(6 —Ü–∏—Ñ—Ä)H = 9 + 6 + 1 = 16
        middle = hash_upper[9:15]  # –ë–µ—Ä–µ–º 6 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ FXEXPRESS
        return middle.isdigit()
    return False

def clean_phone_number(phone):
    """–û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞ 79020387257"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'\D', '', phone)
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if cleaned.startswith('8') and len(cleaned) == 11:
        cleaned = '7' + cleaned[1:]
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, —É–±–∏—Ä–∞–µ–º +
    elif cleaned.startswith('7') and len(cleaned) == 11:
        cleaned = cleaned
    elif len(cleaned) == 10:
        cleaned = '7' + cleaned
    return cleaned if len(cleaned) == 11 else None

def get_phone_suffix(phone):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ (72-57)"""
    if len(phone) >= 4:
        last_four = phone[-4:]
        return f"({last_four[:2]}-{last_four[2:]})"
    return ""

def validate_time(time_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM"""
    try:
        hours, minutes = map(int, time_str.split(':'))
        return 0 <= hours <= 23 and 0 <= minutes <= 59
    except:
        return False

def format_time_from_digits(digits):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º 4 —Ü–∏—Ñ—Ä—ã –≤ –≤—Ä–µ–º—è HH:MM"""
    if len(digits) == 4 and digits.isdigit():
        hours = int(digits[:2])
        minutes = int(digits[2:])
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            return f"{hours:02d}:{minutes:02d}"
    return None

async def delete_message_with_countdown(update, context, message_id, text):
    """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—á–µ—Ç
        for i in range(3, 0, -1):
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=message_id,
                text=f"{text}\n\n–£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {i}..."
            )
            await asyncio.sleep(1)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=message_id
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

def create_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É", callback_data="create_library")],
        [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É", callback_data="select_library")],
        [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –ö–ª–∏–µ–Ω—Ç–∞", callback_data="add_client")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ö–ª–∏–µ–Ω—Ç–∞", callback_data="delete_client")],
        [InlineKeyboardButton("üéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ö–µ—à–∏", callback_data="actual_hashes")],
        [InlineKeyboardButton("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏", callback_data="manage_notifications")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ö–µ—à—É", callback_data="search_hash")],
        [InlineKeyboardButton("üìû –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="search_number")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_back_button(target="back_to_main"):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=target)]])

def create_library_menu(library_id):
    """–ú–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ö–µ—à–µ–π", callback_data=f"view_hashes_{library_id}")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à", callback_data=f"add_hash_{library_id}")],
        [InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_lib_{library_id}")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"change_desc_{library_id}")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ", callback_data=f"search_in_lib_{library_id}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫", callback_data="select_library")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_hash_actions_menu(hash_id, library_id):
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ—à–µ–º"""
    keyboard = [
        [InlineKeyboardButton("üïê –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"update_time_{hash_id}")],
        [InlineKeyboardButton("‚è∞ –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é", callback_data=f"set_time_manual_{hash_id}")],
        [InlineKeyboardButton("üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"update_status_{hash_id}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ö–µ—à", callback_data=f"delete_hash_{hash_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ", callback_data=f"view_library_{library_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    if not await check_access(update, context):
        return
    
    await update.message.reply_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )

# ==================== –°–û–ó–î–ê–ù–ò–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ====================

async def start_create_library(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    context.user_data['creating_library'] = True
    context.user_data['step'] = 'waiting_name'
    context.user_data['last_bot_message'] = query.message.message_id
    
    await query.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (1-30 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=create_back_button()
    )

async def handle_library_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_name':
        return
    
    library_name = update.message.text
    
    if not validate_library_name(library_name):
        error_msg = await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"
        ))
        return
    
    await update.message.delete()
    
    context.user_data['library_name'] = library_name
    context.user_data['step'] = 'waiting_description'
    
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get('last_bot_message'),
        text="üìù –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (1-50 —Å–∏–º–≤–æ–ª–æ–≤):"
    )

async def handle_library_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_description':
        return
    
    description = update.message.text
    
    if not validate_library_description(description):
        error_msg = await update.message.reply_text(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        ))
        return
    
    await update.message.delete()
    
    conn = get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO libraries (name, description) VALUES (?, ?)",
            (context.user_data['library_name'], description)
        )
        conn.commit()
        conn.close()
        
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text=f"‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ \"{context.user_data['library_name']}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
        )
        
        await asyncio.sleep(2)
        
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text="ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu()
        )
        
    except sqlite3.IntegrityError:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text="‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=create_main_menu()
        )
    finally:
        conn.close()
    
    context.user_data.clear()

# ==================== –í–´–ë–û–† –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ====================

async def show_libraries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, description FROM libraries")
    libraries = cursor.fetchall()
    conn.close()
    
    if not libraries:
        await query.edit_message_text(
            "üì≠ –ë–∏–±–ª–∏–æ—Ç–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç!\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É.",
            reply_markup=create_back_button()
        )
        return
    
    text = "üìö –í–∞—à–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n\n"
    keyboard = []
    
    for lib_id, name, description in libraries:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–µ—à–µ–π
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM hashes WHERE library_id = ?", (lib_id,))
        hash_count = cursor.fetchone()[0]
        conn.close()
        
        text += f"‚Ä¢ {name} ({hash_count} —Ö–µ—à–µ–π)\n"
        keyboard.append([InlineKeyboardButton(f"üìñ {name}", callback_data=f"view_library_{lib_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def view_library(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    library_id = int(query.data.split('_')[-1])
    
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name, description FROM libraries WHERE id = ?", (library_id,))
    library = cursor.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–°
    cursor.execute("""
        SELECT hash_text, phone_number, status, time_text 
        FROM hashes 
        WHERE library_id = ? 
        ORDER BY id DESC
    """, (library_id,))
    hashes = cursor.fetchall()
    conn.close()
    
    if library:
        name, description = library
        text = f"üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {name}\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        text += f"üéØ –•–µ—à–µ–π: {len(hashes)}\n\n"
        
        if hashes:
            text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ö–µ—à–∏:\n"
            for i, (hash_text, phone, status, time_text) in enumerate(hashes[:5], 1):
                phone_suffix = get_phone_suffix(phone)
                text += f"{i}. {hash_text}\n"
                text += f"   üìû {phone} {phone_suffix} [{time_text}]\n"
                if status:
                    text += f"   üìã {status}\n"
                text += "\n"
        else:
            text += "üì≠ –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ö–µ—à–µ–π\n"
        
        await query.edit_message_text(
            text=text,
            reply_markup=create_library_menu(library_id)
        )

# ==================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê ====================

async def start_add_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM libraries")
    libraries = cursor.fetchall()
    conn.close()
    
    if not libraries:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞!\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.",
            reply_markup=create_back_button()
        )
        return
    
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
    keyboard = []
    
    for lib_id, name in libraries:
        text += f"‚Ä¢ {name}\n"
        keyboard.append([InlineKeyboardButton(f"üìñ {name}", callback_data=f"add_to_library_{lib_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_add_to_library(update: Update, context: ContextTypes.DEFAULT_TYPE, library_id: int):
    """–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    context.user_data['adding_client'] = True
    context.user_data['step'] = 'waiting_hash'
    context.user_data['library_id'] = library_id
    context.user_data['last_bot_message'] = query.message.message_id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM libraries WHERE id = ?", (library_id,))
    lib_name = cursor.fetchone()[0]
    conn.close()
    
    await query.edit_message_text(
        f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {lib_name}\n\n"
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à –∫–ª–∏–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: FXexpress123456H):",
        reply_markup=create_back_button("add_client")
    )

async def handle_client_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–µ—à –∫–ª–∏–µ–Ω—Ç–∞"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_hash':
        return
    
    hash_text = update.message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    await update.message.delete()
    
    if not validate_hash(hash_text):
        error_msg = await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: FXexpress123456H"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞"
        ))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–µ—à —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—â–µ–º –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ò—â–µ–º —Ö–µ—à –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    cursor.execute("SELECT id FROM hashes WHERE UPPER(hash_text) = UPPER(?)", (hash_text,))
    existing_hash = cursor.fetchone()
    conn.close()
    
    if existing_hash:
        error_msg = await update.message.reply_text(
            f"‚ùå –•–µ—à '{hash_text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ö–µ—à:"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –•–µ—à —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        ))
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –≤ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú —Ä–µ–≥–∏—Å—Ç—Ä–µ –∫–∞–∫ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    context.user_data['hash_text'] = hash_text
    context.user_data['step'] = 'waiting_phone'
    
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get('last_bot_message'),
        text="üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )

async def handle_client_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_phone':
        return
    
    phone = update.message.text
    cleaned_phone = clean_phone_number(phone)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    await update.message.delete()
    
    if not cleaned_phone:
        error_msg = await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞"
        ))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, hash_text FROM hashes WHERE phone_number = ?", (cleaned_phone,))
    existing_phone = cursor.fetchone()
    conn.close()
    
    if existing_phone:
        phone_id, existing_hash = existing_phone
        error_msg = await update.message.reply_text(
            f"‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '{cleaned_phone}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n"
            f"–û–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ö–µ—à—É: {existing_hash}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        ))
        return
    
    context.user_data['phone'] = cleaned_phone
    context.user_data['step'] = 'waiting_phone_type'
    
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get('last_bot_message'),
        text="üì± –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: Alik):"
    )

async def handle_client_phone_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_phone_type':
        return
    
    phone_type = update.message.text
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    await update.message.delete()
    
    if len(phone_type) > 20:
        error_msg = await update.message.reply_text(
            "‚ùå –¢–∏–ø —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–∏–ø —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        ))
        return
    
    context.user_data['phone_type'] = phone_type
    context.user_data['step'] = 'waiting_status'
    
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get('last_bot_message'),
        text="üìù –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (–¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤):"
    )

async def handle_client_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_status':
        return
    
    status = update.message.text
    
    if len(status) > 64:
        error_msg = await update.message.reply_text(
            "‚ùå –°—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        ))
        return
    
    await update.message.delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime("%H:%M:%S")
    
    try:
        cursor.execute(
            "INSERT INTO hashes (library_id, hash_text, phone_number, phone_type, status, time_text) VALUES (?, ?, ?, ?, ?, ?)",
            (context.user_data['library_id'], context.user_data['hash_text'], context.user_data['phone'], context.user_data['phone_type'], status, current_time)
        )
        hash_id = cursor.lastrowid
        
        conn.commit()
        conn.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("SELECT name FROM libraries WHERE id = ?", (context.user_data['library_id'],))
        lib_name = cursor.fetchone()[0]
        
        phone_suffix = get_phone_suffix(context.user_data['phone'])
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π job –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞
        if context.application.bot_data.get('notifications_enabled', False):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π job –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
            context.application.job_queue.run_once(
                send_hash_notification, 
                when=3480,  # —á–µ—Ä–µ–∑ 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
                chat_id=update.effective_chat.id,
                data=hash_id,
                name=f"hash_notification_{hash_id}"
            )
        
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                 f"–•–µ—à: {context.user_data['hash_text']}\n"
                 f"–ù–æ–º–µ—Ä: {context.user_data['phone']} {phone_suffix}\n"
                 f"–¢–∏–ø: {context.user_data['phone_type']}\n"
                 f"–°—Ç–∞—Ç—É—Å: {status}\n"
                 f"–í—Ä–µ–º—è: {current_time}\n"
                 f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —á–µ—Ä–µ–∑ 1 —á–∞—Å\n"
                 f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {lib_name}"
        )
        
        await asyncio.sleep(3)
        
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text="ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu()
        )
        
    except sqlite3.IntegrityError:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text="‚ùå –•–µ—à —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!",
            reply_markup=create_main_menu()
        )
    finally:
        conn.close()
    
    context.user_data.clear()

# ==================== –£–î–ê–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê ====================

async def start_delete_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    context.user_data['deleting_client'] = True
    context.user_data['step'] = 'waiting_hash_for_delete'
    context.user_data['last_bot_message'] = query.message.message_id
    
    await query.edit_message_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n–§–æ—Ä–º–∞—Ç: FXexpress123456H",
        reply_markup=create_back_button()
    )

async def handle_hash_for_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–µ—à –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_hash_for_delete':
        return
    
    hash_to_delete = update.message.text.strip()
    
    if not validate_hash(hash_to_delete):
        error_msg = await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞!"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞"
        ))
        return
    
    await update.message.delete()
    
    # –ò—â–µ–º —Ö–µ—à –≤–æ –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –∫–∞–∫ –≤ –±–∞–∑–µ)
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT h.hash_text, h.phone_number, h.status, l.name 
        FROM hashes h 
        JOIN libraries l ON h.library_id = l.id 
        WHERE h.hash_text = ?
    """, (hash_to_delete,))  # ‚Üê –ò—â–µ–º –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    
    found_hashes = cursor.fetchall()
    conn.close()
    
    if not found_hashes:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text=f"‚ùå **–•–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω!**\n\n`{hash_to_delete}`\n\n–•–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.",
            reply_markup=create_main_menu(),
            parse_mode='Markdown'
        )
        context.user_data.clear()
        return
    
    context.user_data['hash_to_delete'] = hash_to_delete
    context.user_data['found_hashes'] = found_hashes
    context.user_data['step'] = 'confirm_deletion'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ö–µ—à–∞—Ö
    text = "üéØ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n"
    
    for i, (hash_text, phone, status, lib_name) in enumerate(found_hashes, 1):
        phone_suffix = get_phone_suffix(phone)
        text += f"**{i}. –•–µ—à:** `{hash_text}`\n"
        if phone:
            text += f"   **–ù–æ–º–µ—Ä:** `{phone}` {phone_suffix}\n"
        if status:
            text += f"   **–°—Ç–∞—Ç—É—Å:** {status}\n"
        text += f"   **–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞:** {lib_name}\n\n"
    
    text += "‚ùì **–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ö–µ—à –∏–∑ –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫?**"
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="confirm_delete_no")
        ]
    ]
    
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get('last_bot_message'),
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_delete_yes":
        # –£–î–ê–õ–Ø–ï–ú —Ö–µ—à –∏–∑ –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (–ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        hash_to_delete = context.user_data.get('hash_to_delete')
        found_hashes = context.user_data.get('found_hashes', [])
        
        conn = get_connection()
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Ö–µ—à –∏–∑ –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        cursor.execute("DELETE FROM hashes WHERE hash_text = ?", (hash_to_delete,))
        deleted_count = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        text = "‚úÖ **–•–µ—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n"
        text += f"**–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:** {deleted_count}\n"
        text += f"**–•–µ—à:** `{hash_to_delete}`\n\n"
        
        if found_hashes:
            text += "**–ò–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫:**\n"
            for hash_text, phone, status, lib_name in found_hashes:
                text += f"‚Ä¢ {lib_name}\n"
        
        await query.edit_message_text(
            text=text,
            reply_markup=create_main_menu(),
            parse_mode='Markdown'
        )
        
    else:  # confirm_delete_no
        # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        await query.edit_message_text(
            text="‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n–•–µ—à –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=create_main_menu(),
            parse_mode='Markdown'
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()

# ==================== –ê–ö–¢–£–ê–õ–¨–ù–´–ï –•–ï–®–ò ====================

async def show_actual_hashes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ö–µ—à–∏ (–∏—Å—Ç–µ–∫—à–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
    current_time = datetime.now().strftime("%H:%M:%S")
    
    # –ò—â–µ–º —Ö–µ—à–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    cursor.execute("""
        SELECT h.hash_text, h.phone_number, h.phone_type, h.status, h.time_text, l.name, h.missed_cycles 
        FROM hashes h 
        JOIN libraries l ON h.library_id = l.id 
        WHERE h.time_text < ? AND h.time_text != '00:00:00'
        ORDER BY h.time_text ASC
        LIMIT 20
    """, (current_time,))
    
    hashes = cursor.fetchall()
    conn.close()
    
    if not hashes:
        await query.edit_message_text(
            "‚úÖ –ù–µ—Ç —Ö–µ—à–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º",
            reply_markup=create_back_button()
        )
        return
    
    text = "üéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ö–µ—à–∏ (–≤—Ä–µ–º—è –æ—Ç–ø–∏—Å–∏):\n\n"
    
    for i, (hash_text, phone, phone_type, status, time_text, lib_name, missed_cycles) in enumerate(hashes, 1):
        phone_suffix = get_phone_suffix(phone)
        text += f"{i}. {hash_text}\n"
        text += f"   üìû `{phone}` {phone_suffix} [{time_text}]\n"
        if status:
            text += f"   üìã Status: {status}\n"
        text += f"   üí¨ –í–¶: {lib_name}\n"
        if phone_type:
            text += f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone_type}\n"
        if missed_cycles > 0:
            text += f"   üî¥ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫—Ä—É–≥–æ–≤: {missed_cycles}\n"
        text += "\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=create_back_button(),
        parse_mode='Markdown'
    )

# ==================== –ü–û–ò–°–ö ====================

async def start_search_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ö–µ—à—É"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    context.user_data['searching_hash'] = True
    context.user_data['step'] = 'waiting_search_hash'
    context.user_data['last_bot_message'] = query.message.message_id
    
    await query.edit_message_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=create_back_button()
    )

async def handle_search_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ö–µ—à—É"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_search_hash':
        return
    
    search_hash = update.message.text.strip()
    
    await update.message.delete()
    
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT h.hash_text, h.phone_number, h.phone_type, h.status, h.time_text, l.name 
        FROM hashes h 
        JOIN libraries l ON h.library_id = l.id 
        WHERE h.hash_text LIKE ?
    """, (f'%{search_hash}%',))
    
    results = cursor.fetchall()
    conn.close()
    
    if not results:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text=f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_hash}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=create_main_menu()
        )
    else:
        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{search_hash}':\n\n"
        
        for hash_text, phone, phone_type, status, time_text, lib_name in results:
            phone_suffix = get_phone_suffix(phone)
            text += f"‚Ä¢ {hash_text}\n"
            text += f"   üìû `{phone}` {phone_suffix} [{time_text}]\n"
            if status:
                text += f"   üìã Status: {status}\n"
            text += f"   üí¨ –í–¶: {lib_name}\n"
            if phone_type:
                text += f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone_type}\n"
            text += "\n"
        
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text=text,
            reply_markup=create_back_button(),
            parse_mode='Markdown'
        )
    
    context.user_data.clear()

async def start_search_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    context.user_data['searching_number'] = True
    context.user_data['step'] = 'waiting_search_number'
    context.user_data['last_bot_message'] = query.message.message_id
    
    await query.edit_message_text(
        "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=create_back_button()
    )

async def handle_search_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_search_number':
        return
    
    search_number = update.message.text
    cleaned_number = clean_phone_number(search_number)
    
    await update.message.delete()
    
    if not cleaned_number:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!",
            reply_markup=create_main_menu()
        )
        context.user_data.clear()
        return
    
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT h.hash_text, h.phone_number, h.phone_type, h.status, h.time_text, l.name 
        FROM hashes h 
        JOIN libraries l ON h.library_id = l.id 
        WHERE h.phone_number LIKE ?
    """, (f'%{cleaned_number}%',))
    
    results = cursor.fetchall()
    conn.close()
    
    if not results:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text=f"‚ùå –ü–æ –Ω–æ–º–µ—Ä—É '{cleaned_number}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=create_main_menu()
        )
    else:
        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É '{cleaned_number}':\n\n"
        
        for hash_text, phone, phone_type, status, time_text, lib_name in results:
            phone_suffix = get_phone_suffix(phone)
            text += f"‚Ä¢ {hash_text}\n"
            text += f"   üìû `{phone}` {phone_suffix} [{time_text}]\n"
            if status:
                text += f"   üìã Status: {status}\n"
            text += f"   üí¨ –í–¶: {lib_name}\n"
            if phone_type:
                text += f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone_type}\n"
            text += "\n"
        
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_bot_message'),
            text=text,
            reply_markup=create_back_button(),
            parse_mode='Markdown'
        )
    
    context.user_data.clear()

# ==================== –§–£–ù–ö–¶–ò–ò –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ====================

async def view_library_hashes(update: Update, context: ContextTypes.DEFAULT_TYPE, library_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–µ—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    cursor.execute("SELECT name FROM libraries WHERE id = ?", (library_id,))
    lib_name = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–°
    cursor.execute("""
        SELECT id, hash_text, phone_number, status, time_text 
        FROM hashes 
        WHERE library_id = ? 
        ORDER BY id DESC
    """, (library_id,))
    hashes = cursor.fetchall()
    conn.close()
    
    if not hashes:
        await query.edit_message_text(
            f"üì≠ –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ '{lib_name}' –Ω–µ—Ç —Ö–µ—à–µ–π",
            reply_markup=create_library_menu(library_id)
        )
        return
    
    text = f"üìö –•–µ—à–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ '{lib_name}':\n\n"
    
    for hash_id, hash_text, phone, status, time_text in hashes:
        phone_suffix = get_phone_suffix(phone)
        text += f"‚Ä¢ {hash_text}\n"
        text += f"  üìû {phone} {phone_suffix} [{time_text}]\n"
        if status:
            text += f"  üìã {status}\n"
        text += f"  [ID: {hash_id}]\n\n"
    
    await query.edit_message_text(
        text=text,
        reply_markup=create_library_menu(library_id)
    )

async def manage_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_enabled = context.application.bot_data.get('notifications_enabled', False)
    
    if notifications_enabled:
        text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ–Æ–ß–ï–ù–´\n\n–ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ö–µ—à–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º."
        button_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        callback_data = "disable_notifications"
    else:
        text = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–´–ö–õ–Æ–ß–ï–ù–´\n\n–í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        button_text = "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" 
        callback_data = "enable_notifications"
    
    keyboard = [
        [InlineKeyboardButton(button_text, callback_data=callback_data)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def update_hash_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ö–µ—à–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: complete_hash_123)
    hash_id = int(query.data.split('_')[-1])
    
    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if hash_id in sent_notifications:
        del sent_notifications[hash_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime("%H:%M:%S")
    
    conn = get_connection()
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ö–µ—à–∞ –∏ –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    cursor.execute(
        "UPDATE hashes SET time_text = ?, missed_cycles = 0 WHERE id = ?",
        (current_time, hash_id)
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    cursor.execute("""
        SELECT h.hash_text, h.phone_number, h.phone_type, h.status, l.name 
        FROM hashes h 
        JOIN libraries l ON h.library_id = l.id 
        WHERE h.id = ?
    """, (hash_id,))
    
    hash_info = cursor.fetchone()
    conn.commit()
    conn.close()
    
    if hash_info:
        hash_text, phone, phone_type, status, lib_name = hash_info
        phone_suffix = get_phone_suffix(phone)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        await query.message.delete()
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π job –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞
        if context.application.bot_data.get('notifications_enabled', False):
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π job –µ—Å–ª–∏ –µ—Å—Ç—å
            old_job_name = f"hash_notification_{hash_id}"
            current_jobs = context.application.job_queue.get_jobs_by_name(old_job_name)
            for job in current_jobs:
                job.schedule_removal()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π job –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
            context.application.job_queue.run_once(
                send_hash_notification, 
                when=3480,  # —á–µ—Ä–µ–∑ 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
                chat_id=query.message.chat_id,
                data=hash_id,
                name=f"hash_notification_{hash_id}"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_msg = await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚úÖ –í—Ä–µ–º—è —Ö–µ—à–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                 f"–•–µ—à: {hash_text}\n"
                 f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {current_time}\n"
                 f"–°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫—Ä—É–≥–æ–≤ –æ–±–Ω—É–ª–µ–Ω\n"
                 f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —á–µ—Ä–µ–∑ 1 —á–∞—Å",
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        await confirmation_msg.delete()

async def send_hash_notification(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–µ—à–∞ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ"""
    job = context.job
    hash_id = job.data
    
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à–µ
    cursor.execute("""
        SELECT h.hash_text, h.phone_number, h.phone_type, h.status, h.time_text, l.name, h.missed_cycles 
        FROM hashes h 
        JOIN libraries l ON h.library_id = l.id 
        WHERE h.id = ?
    """, (hash_id,))
    
    hash_info = cursor.fetchone()
    
    if hash_info:
        hash_text, phone, phone_type, status, time_text, lib_name, missed_cycles = hash_info
        phone_suffix = get_phone_suffix(phone)
        
        message = f"üîî –í—Ä–µ–º—è –æ—Ç–ø–∏—Å–∏!\n\n"
        message += f"–•–µ—à: {hash_text}\n"
        message += f"üìû `{phone}` {phone_suffix} [{time_text}]\n"
        if status:
            message += f"üìã Status: {status}\n"
        message += f"üí¨ –í–¶: {lib_name}\n"
        if phone_type:
            message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone_type}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫—Ä—É–≥–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if missed_cycles > 0:
            message += f"üî¥ –ü—Ä–æ–ø—É—â–µ–Ω {missed_cycles} –∫—Ä—É–≥!\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_hash_{hash_id}")]
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞
        if hash_id in sent_notifications:
            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫—Ä—É–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞
                new_missed_cycles = missed_cycles + 1
                cursor.execute(
                    "UPDATE hashes SET missed_cycles = ? WHERE id = ?",
                    (new_missed_cycles, hash_id)
                )
                conn.commit()
                conn.close()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º
                if new_missed_cycles > 0:
                    message += f"üî¥ –ü—Ä–æ–ø—É—â–µ–Ω {new_missed_cycles} –∫—Ä—É–≥!\n"
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.edit_message_text(
                    chat_id=job.chat_id,
                    message_id=sent_notifications[hash_id],
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                print(f"‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ö–µ—à–∞ {hash_text}, –∫—Ä—É–≥–æ–≤: {new_missed_cycles}")
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ —Ç.–¥.), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {hash_text}: {e}")
                new_message = await context.bot.send_message(
                    chat_id=job.chat_id,
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                sent_notifications[hash_id] = new_message.message_id
        else:
            # –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            sent_notifications[hash_id] = None  # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            new_message = await context.bot.send_message(
                chat_id=job.chat_id,
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            sent_notifications[hash_id] = new_message.message_id
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ö–µ—à–∞ {hash_text}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞ —á–µ—Ä–µ–∑ 58 –º–∏–Ω—É—Ç
        context.application.job_queue.run_once(
            send_hash_notification, 
            when=3480,  # 58 –º–∏–Ω—É—Ç = 3480 —Å–µ–∫—É–Ω–¥
            chat_id=job.chat_id,
            data=hash_id,
            name=f"hash_notification_{hash_id}"
        )
    
    conn.close()

async def send_notifications(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö —Ö–µ—à–µ–π (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if not context.application.bot_data.get('notifications_enabled', False):
        return
    
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
    current_time = datetime.now().strftime("%H:%M:%S")
    
    # –ò—â–µ–º —Ö–µ—à–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ
    cursor.execute("""
        SELECT h.id, h.hash_text, h.phone_number, h.phone_type, h.status, h.time_text, l.name, h.missed_cycles, h.next_notification 
        FROM hashes h 
        JOIN libraries l ON h.library_id = l.id 
        WHERE h.next_notification <= ? AND h.time_text != '00:00:00' AND h.next_notification != ''
        ORDER BY h.next_notification ASC
    """, (current_time,))
    
    ready_hashes = cursor.fetchall()
    
    for hash_id, hash_text, phone, phone_type, status, time_text, lib_name, missed_cycles, next_notification in ready_hashes:
        phone_suffix = get_phone_suffix(phone)
        message = f"üîî –í—Ä–µ–º—è –æ—Ç–ø–∏—Å–∏!\n\n"
        message += f"–•–µ—à: {hash_text}\n"
        message += f"üìû `{phone}` {phone_suffix} [{time_text}]\n"
        if status:
            message += f"üìã Status: {status}\n"
        message += f"üí¨ –í–¶: {lib_name}\n"
        if phone_type:
            message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone_type}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫—Ä—É–≥–∞—Ö
        if missed_cycles > 0:
            message += f"üî¥ –ü—Ä–æ–ø—É—â–µ–Ω {missed_cycles} –∫—Ä—É–≥!\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_hash_{hash_id}")]
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ—à–∞
        if hash_id in sent_notifications:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.edit_message_text(
                    chat_id=context.job.chat_id,
                    message_id=sent_notifications[hash_id],
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                print(f"‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ö–µ—à–∞ {hash_text}")
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {hash_text}: {e}")
                new_message = await context.bot.send_message(
                    chat_id=context.job.chat_id,
                    text=message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                sent_notifications[hash_id] = new_message.message_id
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            new_message = await context.bot.send_message(
                chat_id=context.job.chat_id,
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            sent_notifications[hash_id] = new_message.message_id
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ö–µ—à–∞ {hash_text}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫—Ä—É–≥–æ–≤
        cursor.execute(
            "UPDATE hashes SET missed_cycles = missed_cycles + 1 WHERE id = ?",
            (hash_id,)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3480 (58 –º–∏–Ω—É—Ç) —Å–µ–∫—É–Ω–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        next_time = (datetime.now() + timedelta(seconds=3480)).strftime("%H:%M:%S")
        cursor.execute(
            "UPDATE hashes SET next_notification = ? WHERE id = ?",
            (next_time, hash_id)
        )
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {hash_text} –Ω–∞ {next_time}")
    
    conn.commit()
    conn.close()

async def start_add_hash_to_library(update: Update, context: ContextTypes.DEFAULT_TYPE, library_id: int):
    """–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    context.user_data['adding_hash_to_library'] = True
    context.user_data['step'] = 'waiting_hash_for_library'
    context.user_data['library_id'] = library_id
    context.user_data['last_bot_message'] = query.message.message_id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM libraries WHERE id = ?", (library_id,))
    lib_name = cursor.fetchone()[0]
    conn.close()
    
    await query.edit_message_text(
        f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {lib_name}\n\n"
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à (—Ñ–æ—Ä–º–∞—Ç: FXexpress123456H):",
        reply_markup=create_back_button(f"view_library_{library_id}")
    )

async def handle_hash_for_library(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–µ—à –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    if not await check_access(update, context):
        return
        
    if context.user_data.get('step') != 'waiting_hash_for_library':
        return
    
    hash_text = update.message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    await update.message.delete()
    
    if not validate_hash(hash_text):
        error_msg = await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: FXexpress123456H"
        )
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞"
        ))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–µ—à —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—â–µ–º –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ò—â–µ–º —Ö–µ—à –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    cursor.execute("SELECT id FROM hashes WHERE UPPER(hash_text) = UPPER(?)", (hash_text,))
    existing_hash = cursor.fetchone()
    conn.close()
    
    if existing_hash:
        error_msg = await update.message.reply_text(
            f"‚ùå –•–µ—à '{hash_text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ö–µ—à:"
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        asyncio.create_task(delete_message_with_countdown(
            update, context, error_msg.message_id, "‚ùå –•–µ—à —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        ))
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –≤ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú —Ä–µ–≥–∏—Å—Ç—Ä–µ –∫–∞–∫ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    context.user_data['hash_text'] = hash_text
    context.user_data['step'] = 'waiting_phone'
    
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get('last_bot_message'),
        text="üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not await check_access(update, context):
        return
        
    current_step = context.user_data.get('step')
    
    if current_step == 'waiting_name':
        await handle_library_name(update, context)
    elif current_step == 'waiting_description':
        await handle_library_description(update, context)
    elif current_step == 'waiting_hash':
        await handle_client_hash(update, context)
    elif current_step == 'waiting_phone':
        await handle_client_phone(update, context)
    elif current_step == 'waiting_phone_type':  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
        await handle_client_phone_type(update, context)  # ‚Üê –ò –≠–¢–£
    elif current_step == 'waiting_hash_for_library':  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ß–ö–£
        await handle_hash_for_library(update, context)  # ‚Üê –ò –≠–¢–£
    elif current_step == 'waiting_status':
        await handle_client_status(update, context)
    elif current_step == 'waiting_hash_for_delete':
        await handle_hash_for_delete(update, context)
    elif current_step == 'waiting_search_hash':
        await handle_search_hash(update, context)
    elif current_step == 'waiting_search_number':
        await handle_search_number(update, context)
    elif current_step == 'waiting_hash_for_library':
        await handle_client_hash(update, context)
        
    elif data == "enable_notifications":
        context.bot_data['notifications_enabled'] = True
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∞ - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
        if hasattr(context, 'job_queue'):
            context.job_queue.run_repeating(send_notifications, interval=13, first=3, chat_id=query.message.chat_id)
        await query.edit_message_text(
            text="‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.",
            reply_markup=create_back_button()
        )
    
    elif data == "disable_notifications":
        context.bot_data['notifications_enabled'] = False
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if hasattr(context, 'job_queue'):
            current_jobs = context.job_queue.get_jobs_by_name("notification_job")
            for job in current_jobs:
                job.schedule_removal()
        await query.edit_message_text(
            text="‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!",
            reply_markup=create_back_button()
        )
        
    elif data == "disable_notifications":
        context.application.bot_data['notifications_enabled'] = False
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        current_jobs = context.application.job_queue.get_jobs_by_name("notification_job")
        for job in current_jobs:
            job.schedule_removal()
        # –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        sent_notifications.clear()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        await manage_notifications(update, context)

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ====================

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    if not await check_access(update, context):
        return
    
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "back_to_main":
        await query.edit_message_text(
            "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu()
        )
    
    elif data == "create_library":
        await start_create_library(update, context)
    
    elif data == "select_library":
        await show_libraries(update, context)
    
    elif data.startswith("view_library_"):
        await view_library(update, context)
    
    elif data == "add_client":
        await start_add_client(update, context)
    
    elif data.startswith("add_to_library_"):
        library_id = int(data.split('_')[-1])
        await start_add_to_library(update, context, library_id)
    
    elif data == "delete_client":
        await start_delete_client(update, context)
    
    elif data == "actual_hashes":
        await show_actual_hashes(update, context)
    
    elif data == "search_hash":
        await start_search_hash(update, context)
    
    elif data == "search_number":
        await start_search_number(update, context)
    
    elif data == "manage_notifications":
        await manage_notifications(update, context)
    
    elif data in ["confirm_delete_yes", "confirm_delete_no"]:
        await handle_delete_confirmation(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    elif data.startswith("view_hashes_"):
        library_id = int(data.split('_')[-1])
        await view_library_hashes(update, context, library_id)
    
    elif data.startswith("add_hash_"):
        library_id = int(data.split('_')[-1])
        await start_add_hash_to_library(update, context, library_id)
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    elif any(data.startswith(prefix) for prefix in ["rename_lib_", "change_desc_", "search_in_lib_"]):
        await query.edit_message_text(
            "üõ† –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!",
            reply_markup=create_main_menu()
        )
        
    elif data == "enable_notifications":
        context.application.bot_data['notifications_enabled'] = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ jobs –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ö–µ—à–µ–π
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now().strftime("%H:%M:%S")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ö–µ—à–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –±–æ–ª–µ–µ 60 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        cursor.execute("""
            SELECT id FROM hashes 
            WHERE time_text != '00:00:00' 
            AND time_text <= TIME(datetime('now', '-60 minutes'))
        """)
        expired_hashes = cursor.fetchall()
        conn.close()
        
        for (hash_id,) in expired_hashes:
            # –î–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ö–µ—à–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
            context.application.job_queue.run_once(
                send_hash_notification, 
                when=1,  # —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                chat_id=query.message.chat_id,
                data=hash_id,
                name=f"hash_notification_{hash_id}"
            )
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–µ—à–µ–π –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM hashes WHERE time_text != '00:00:00'")
        all_hashes = cursor.fetchall()
        conn.close()
        
        expired_ids = [hash_id for (hash_id,) in expired_hashes]
        
        for (hash_id,) in all_hashes:
            if hash_id not in expired_ids:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π job –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–µ—à–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å
                context.application.job_queue.run_once(
                    send_hash_notification, 
                    when=3480,  # —á–µ—Ä–µ–∑ 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
                    chat_id=query.message.chat_id,
                    data=hash_id,
                    name=f"hash_notification_{hash_id}"
                )
        
        await manage_notifications(update, context)
    
    elif data == "disable_notifications":
        context.application.bot_data['notifications_enabled'] = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ jobs —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        current_jobs = context.application.job_queue.jobs()
        for job in current_jobs:
            if job.name and job.name.startswith("hash_notification_"):
                job.schedule_removal()
        
        # –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        sent_notifications.clear()
        
        await manage_notifications(update, context)
        
    elif data.startswith("complete_hash_"):
        await update_hash_time(update, context)

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    init_database()
    
#    token = "8250160966:AAEOa3o4MY2GGA47vLbSb7oLNJE8w3k5lv0"
    token = os.environ.get('BOT_TOKEN')
    
    # –°–æ–∑–¥–∞–µ–º Application —Å JobQueue
    application = (
        Application.builder()
        .token(token)
        .build()
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(handle_button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    application.bot_data['notifications_enabled'] = False
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
    application.run_polling()

if __name__ == '__main__':
    main()